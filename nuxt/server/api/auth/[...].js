import CredentialsProvider from "next-auth/providers/credentials";
import EmailProvider from "next-auth/providers/email";
import { NuxtAuthHandler } from "#auth";
import { createTransport } from "nodemailer";
import { MongoDBAdapter } from "@next-auth/mongodb-adapter";

export default NuxtAuthHandler({
  // —Å–µ–∫—Ä–µ—Ç, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –¥–ª—è –∑–∞–ø—É—Å–∫–∞ nuxt-auth –≤ —Ä–∞–±–æ—á–µ–º —Ä–µ–∂–∏–º–µ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö)
  secret: "process.env.NUXT_SECRET",
  adapter: MongoDBAdapter(mongoClientAuth),
  pages: {
    // –ò–∑–º–µ–Ω–∏—Ç–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `/login` –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø—É—Ç–∏ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—Ö–æ–¥–∞
    signIn: "/site/user/login",
  },
  callbacks: {
    // –û–±—Ä–∞—Ç–Ω—ã–π –≤—ã–∑–æ–≤ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ / –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ JWT, —Å–º. https://next-auth.js.org/configuration/callbacks#jwt-callback
    jwt: async ({ token, user }) => {
      const isSignIn = user ? true : false;
      return Promise.resolve(token);
    },
    // –û–±—Ä–∞—Ç–Ω—ã–π –≤—ã–∑–æ–≤ –≤—Å—è–∫–∏–π —Ä–∞–∑, –∫–æ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è —Å–µ–∞–Ω—Å, —Å–º. https://next-auth.js.org/configuration/callbacks#session-callback
    session: async ({ session, token }) => {
      return Promise.resolve(session);
    },
    async redirect({ url, baseUrl }) {
      // Allows relative callback URLs
      /*   if (url.startsWith("/")) {
        console.log(111111);
        return `${baseUrl}${url}`;
      } */

      // Allows callback URLs on the same origin
      /* else if (new URL(url).origin === baseUrl) {
        console.log(333333);
        return url;
      } */
      return url;
    },
  },
  providers: [
    EmailProvider.default({
      // –ò–º—è, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –≤ —Ñ–æ—Ä–º–µ –≤—Ö–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–í–æ–π–¥–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é...")
      name: "email",
      server: {
        host: "smtp.spaceweb.ru",
        port: 25,
        secure: false, // true for 465, false for other ports
        auth: {
          user: "admin@serega183.ru", // generated ethereal user
          pass: "parolAdmin183", // generated ethereal password
        },
      },
      from: '"Nuxt-next auth üëª" <admin@serega183.ru>',
    }),
    CredentialsProvider.default({
      // –ò–º—è, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –≤ —Ñ–æ—Ä–º–µ –≤—Ö–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–í–æ–π–¥–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é...")
      name: "Credentials",
      // –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥—Ö–æ–¥—è—â–µ–π —Ñ–æ—Ä–º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—Ö–æ–¥–∞.
      // –í—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –ª—é–±—ã–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ, –∫–∞–∫ –≤—ã –æ–∂–∏–¥–∞–µ—Ç–µ, –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.
      // –Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–æ–º–µ–Ω, –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–∞—Ä–æ–ª—å, —Ç–æ–∫–µ–Ω 2FA –∏ —Ç.–¥.
      // –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –ª—é–±–æ–π HTML-–∞—Ç—Ä–∏–±—É—Ç —Ç–µ–≥—É <input> —á–µ—Ä–µ–∑ –æ–±—ä–µ–∫—Ç.
      credentials: {
        username: { label: "qqq", type: "text", placeholder: "(hint: qqq)" },
        password: { label: "qqq", type: "password", placeholder: "(hint: qqq)" },
      },
      authorize(credentials) {
        // –í–∞–º –Ω—É–∂–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∑–¥–µ—Å—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        // –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–∏–±–æ –æ–±—ä–µ–∫—Ç, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ª–∏–±–æ –∑–Ω–∞—á–µ–Ω–∏–µ
        // —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–≤–Ω–æ false/null, –µ—Å–ª–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã.
        // –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –ü–†–ò–í–ï–î–ï–ù–ù–ê–Ø –ù–ò–ñ–ï –õ–û–ì–ò–ö–ê –ù–ï–ë–ï–ó–û–ü–ê–°–ù–ê –ò–õ–ò –ù–ï –ü–û–î–•–û–î–ò–¢ –î–õ–Ø –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò!
        const user = {
          id: "1",
          name: "qqq",
          password: "qqq",
          image: "https://avatars.githubusercontent.com/u/25911230?v=4",
          email: "email@mail.ru",
          phone: "88858758757",
        };

        if (credentials?.username === user.name && credentials?.password === user.password) {
          // –õ—é–±–æ–π –≤–æ–∑–≤—Ä–∞—â–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Å–≤–æ–π—Å—Ç–≤–µ `user` JWT
          const u = {
            name: user.name,
            email: user.email,
            phone: user.phone,
            id: user.id,
          };
          return user;
        } else {
          // eslint-disable-next-line no-console
          console.error(
            "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
          );

          // –ï—Å–ª–∏ –≤—ã –≤–µ—Ä–Ω–µ—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ null, —Ç–æ –±—É–¥–µ—Ç –≤—ã–≤–µ–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ.
          return null;

          // –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å —ç—Ç–æ—Ç –æ–±—Ä–∞—Ç–Ω—ã–π –≤—ã–∑–æ–≤ —Å –æ—à–∏–±–∫–æ–π, —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—à–∏–±–∫–∏ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞
        }
      },
    }),
  ],
});

/*  */

async function sendVerificationRequest(params) {
  const { identifier, url, provider, theme } = params;
  const { host } = new URL(url);
  // NOTE: You are not required to use `nodemailer`, use whatever you want.
  const transport = createTransport(provider.server);
  const result = await transport.sendMail({
    to: identifier,
    from: provider.from,
    subject: `Sign in to ${host}`,
    text: text({ url, host }),
    html: html({ url, host, theme }),
  });
  const failed = result.rejected.concat(result.pending).filter(Boolean);
  if (failed.length) {
    throw new Error(`Email(s) (${failed.join(", ")}) could not be sent`);
  }
}

/**
 * Email HTML body
 * Insert invisible space into domains from being turned into a hyperlink by email
 * clients like Outlook and Apple mail, as this is confusing because it seems
 * like they are supposed to click on it to sign in.
 *
 * @note We don't add the email address to avoid needing to escape it, if you do, remember to sanitize it!
 */
function html(params) {
  const { url, host, theme } = params;

  const escapedHost = host.replace(/\./g, "&#8203;.");

  const brandColor = theme.brandColor || "#346df1";
  const color = {
    background: "#f9f9f9",
    text: "#444",
    mainBackground: "#fff",
    buttonBackground: brandColor,
    buttonBorder: brandColor,
    buttonText: theme.buttonText || "#fff",
  };

  return `
<body style="background: ${color.background};">
  <table width="100%" border="0" cellspacing="20" cellpadding="0"
    style="background: ${color.mainBackground}; max-width: 600px; margin: auto; border-radius: 10px;">
    <tr>
      <td align="center"
        style="padding: 10px 0px; font-size: 22px; font-family: Helvetica, Arial, sans-serif; color: ${color.text};">
        Sign in to <strong>${escapedHost}</strong>
      </td>
    </tr>
    <tr>
      <td align="center" style="padding: 20px 0;">
        <table border="0" cellspacing="0" cellpadding="0">
          <tr>
            <td align="center" style="border-radius: 5px;" bgcolor="${color.buttonBackground}"><a href="${url}"
                target="_blank"
                style="font-size: 18px; font-family: Helvetica, Arial, sans-serif; color: ${color.buttonText}; text-decoration: none; border-radius: 5px; padding: 10px 20px; border: 1px solid ${color.buttonBorder}; display: inline-block; font-weight: bold;">Sign
                in</a></td>
          </tr>
        </table>
      </td>
    </tr>
    <tr>
      <td align="center"
        style="padding: 0px 0px 10px 0px; font-size: 16px; line-height: 22px; font-family: Helvetica, Arial, sans-serif; color: ${color.text};">
        If you did not request this email you can safely ignore it.
      </td>
    </tr>
  </table>
</body>
`;
}

/** Email Text body (fallback for email clients that don't render HTML, e.g. feature phones) */
function text({ url, host }) {
  return `Sign in to ${host}\n${url}\n\n`;
}
